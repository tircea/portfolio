import os

# Списки словоформ поділених на морфеми
wordsIm = ["сестр-а", "сестр-и", "сестр-і", "сестр-у", "сестр-ою", "сестр-і", "сестр-о", "сестр-и",
           "сестер-0", "сестр-ам", "сестер-0", "сестр-ами", "сестр-ах", "сестр-и"]

wordsPk = ["велик-ий", "велик-ого", "велик-ому", "велик-ий", "велик-ого", "велик-им", "велик-ому", "велик-ім",
           "велик-а", "велик-ої", "велик-ій", "велик-у", "велик-ою", "велик-ій", "велик-е", "велик-ого",
           "велик-ому", "велик-е", "велик-им", "велик-ому", "велик-ім", "велик-і", "велик-их", "велик-им",
           "велик-их", "велик-і", "велик-ими", "велик-их"]

wordsGl = ["танцюва-ти-м-у", "танцюва-ти-м-еш", "танцюва-ти-м-е", "танцюва-ти-м-ем", "танцюва-ти-м-емо",
           "танцюва-ти-м-ете", "танцюва-ти-м-уть", "танцю-ю", "танцю-єш", "танцю-є", "танцю-єм", "танцю-ємо",
           "танцю-єте", "танцю-ють", "танцюва-в-0", "танцюва-л-а", "танцюва-л-о", "танцюва-л-и",
           "танцюй-0", "танцюй-мо", "танцюй-те"]

words = [wordsIm, wordsPk, wordsGl]

# Функція очищення консолі
clear = lambda: os.system('cls' if os.name == 'nt' else 'clear')

# Функція очищення слова від службових символів
def fixWord(word):
    word = word.replace("-", '')
    word = word.replace("0", '')
    return word

# Інтерфейс вибору елементів
def selectorRender(text, arr):
    x = 1
    end = []
    for i in arr:
        i = fixWord(i)
        end.append(f'\t{x}. {i}')
        x += 1
    while True:
        value = input("\n" + text + "\n\n" + "\n".join(end) + "\n\nВкажіть цифру обраного елементу: ")
        try:
            value = int(value)
            item = arr[value - 1]
            break
        except:
            print("Помилка, спробуйте ще раз!")
    return value - 1

# Алгоритм для іменника
def imAction(unfixedWord):
    word = fixWord(unfixedWord)
    wordSize = len(word)
    if wordSize > 6:
        if wordSize > 7:
            return "/-***/ сегментується О.в. мн.(-ами)."
        else:
            return "/-**/ сегментуються О.в. одн.(-ою); Д.в. мн.(-ам), М.в.(-ах) мн."
    else:
        if word == "сестер":
            return "позначається нульова флексія в Р.в. та Зн.в. множини."
        else:
            return "/-*/ сегментуються Н.в. одн.(-а), Р.в. одн.(-и), Д.в. та М.в. одн.(-і), Зн.в. одн.(-у), Кл.в. одн.(-о); Н.в., Кл.в. мн.(-и)."

# Алгоритм для прикметника
def pkAction(unfixedWord):
    word = fixWord(unfixedWord)
    wordSize = len(word)
    if wordSize > 6:
        if wordSize > 7:
            return "/-***/ сегментуються Р.в. та Зн.в. чол.р. одн.(-ого), Д.в. та М.в. чол.р. одн.(-ому), Р.в. сер.р. одн.(-ого), Д.в. та М.в. сер.р. одн.(-ому), О.в. мн.(-ими)."
        else:
            return "/-**/ сегментуються Н.в., Зн.в. чол.р. одн.(-ий), О.в. чол.р. одн.(-им), М.в. чол.р. одн.(-ім), Р.в. жін.р. одн.(-ої), Д.в., М.в. жін.р. одн.(-ій), О.в. жін.р. одн.(-ою), О.в. сер.р. одн.(-им), М.в. сер.р. одн.(-ім), Р.в., Зн.в., М.в. мн.(-их), Д.в. мн.(-им)."
    else:
        return "/-*/ сегментуються Н.в. жін.р. одн.(-а), Зн.в. жін.р. одн.(-у), Н.в., Зн.в. сер.р. одн.(-е), Н.в., Зн.в. множини(-і)."

# Алгоритм для дієслова
def glAction(unfixedWord):
    word = fixWord(unfixedWord)
    wordSize = len(word)
    lastSym = word[-1]
    if wordSize > 6:
        if lastSym == "в":
            return "/-*/ сегментуються 1 ос. од. теп. часу(-ю), 3 ос. од. теп. часу(-є), чол.р. од. мин. часу(-в-)."
        else:
            if wordSize > 9:
                if wordSize > 12:
                    return "/-**-**-**/ сегментуються 1 ос. мн. майб. часу(-ти-ме-мо), 2 ос. мн. майб. часу(-ти-ме-те), 3 ос. мн. майб. часу(-ти-му-ть)."
                else:
                    return "/-**-**-*/ сегментуються 2 ос. од. майб. часу(-ти-ме-ш), 1 ос. мн. майб. часу(-ти-ме-м)."
            elif wordSize > 8:
                return "/-**-**/ сегментуються 1 ос. од. майб. часу(-ти-му-), 3 ос. од. майб. часу(-ти-ме-)."
            elif wordSize > 6:
                return "/-*-*/ сегментуються жін.р. од. мин. часу(-л-а), сер.р. од. мин. часу(-л-о), множ. мин. часу(-л-и)."
            elif "й" in word:
                return "/-**/ сегментуються 2 ос. од. теп. часу(-єш), 1 ос. мн. теп. часу(-єм), 1 ос. мн. наказ. способу(-мо), 2 ос. мн. наказ. способу(-те)."
            else:
                return "/-***/ сегментуються 1 ос. мн. теп. часу(-ємо), 2 ос. мн. теп. часу(-єте), 3 ос. мн. теп. часу(-ють)."
    else:
        if lastSym == "й":
            return "позначається нульова флексія 2 ос. од. наказ. способу."
        else:
            return "/-*/ сегментуються 1 ос. од. теп. часу(-ю), 3 ос. од. теп. часу(-є), чол.р. од. мин. часу(-в-)."

# Головна функція, що викликає сегментацію залежно від частини мови
def loadAction(typeNum, word):
    match typeNum:
        case 0:
            return imAction(word)
        case 1:
            return pkAction(word)
        case 2:
            return glAction(word)
        case _:
            return "Invalid type"

# Запуск програми
clear()
typeNum = selectorRender("Оберіть частину мови: ", ["Іменник", "Прикметник", "Дієслово"])
clear()
selectedWord = selectorRender("Оберіть слово:", words[typeNum])
clear()
word = words[typeNum][selectedWord]
content = loadAction(typeNum, word)
print(word + "\n" + content)